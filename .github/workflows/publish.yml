name: Release Library

on:
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Compile and Deploy Smart Contract
        run: |
          npm install
          npx hardhat compile
          npx hardhat node &
          NODE_PID=$!
          while ! nc -z 127.0.0.1 8545; do sleep 1; done
          npx hardhat run scripts/deploy.ts --network localhost
          kill $NODE_PID

      - name: Copy Artifact to Library
        run: |
          cp ./artifacts/contracts/PrivatelyCoin.sol/PrivatelyCoin.json ./lib/
          cp ./artifacts/contracts/PrivatelyCollection.sol/PrivatelyCollection.json ./lib/
          cp ./artifacts/contracts/PrivatelyAuctionSystem.sol/PrivatelyAuctionSystem.json ./lib/

      - name: Install dependencies for lib
        run: npm install
        working-directory: ./lib

      - name: Build library package
        run: npm run build
        working-directory: ./lib

      - name: Pack library package
        run: npm pack
        working-directory: ./lib

      - name: Get latest Git tag
        id: package_version
        run: |
          TAG=$(git describe --tags --abbrev=0 || echo "unversioned")
          echo "VERSION=$TAG" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          files: |
            ./lib/*.tgz
            ./lib/PrivatelyNFT.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename old latest tag
        run: |
          if git rev-parse latest >/dev/null 2>&1; then
            OLD_VERSION=$(git describe --tags latest)
            if [ "$OLD_VERSION" != "latest" ]; then
              git tag -d $OLD_VERSION || true
              git tag $OLD_VERSION $(git rev-parse latest)
              git push origin :refs/tags/$OLD_VERSION || true
              git push origin $OLD_VERSION
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest tag
        run: |
          git tag -d latest || true
          git push origin :refs/tags/latest || true
          git tag latest
          git push origin latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}